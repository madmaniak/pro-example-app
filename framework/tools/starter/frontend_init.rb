require 'fileutils'
require_relative '../consumers/ruby/helpers/paths_resolver'

libs = ["# generated by pro - any change will be overwritten",
        "# checkout file framework/tools/starter/frontend_init.rb",
        "require 'imba'",
        "global.L = require 'lodash'"]

views = \
  Dir['app/*']
    .select{ |f| File.directory?(f) }
    .map{ |d| "'#{d.split('/').last}'" }
    .join(',')

libs += ["global.Views = [#{views}]"]

list = ["framework/services/index.coffee"]
list += ['framework/app/app.imba'] unless File.exist? 'app/app.imba'
list +=
  PathsResolver.resolve('s(c|a)ss', sort: true) +
  PathsResolver.resolve('(jpe?g|png|gif|svg)') +
  PathsResolver.resolve('(imba|js|coffee)', sort: :leafs_first)


list.map! do |line|
  "require '../../#{line}'"
end

def getter_class(ns, getter, order_by)
  extension = \
    if getter.s[:limit]
      if getter.s[:order][0][0] == :id
      then ".Static" else ".Dynamic" end
    end

  r  = getter.s[:relations].map{ |rel, g|
    "#{rel.to_s}:'#{$services.key(g).gsub(/^front\//, '')}'"
  }
  relations = "\n  @relations: {#{r.join(",")}}" if r.any?

  "class @['C'] extends Collection#{extension}
  @path: '#{ns}'
  @base: '#{getter.s[:base]}'
  @order: #{order_by}#{relations}
Collection.list['#{ns}'] = @['C']"
end

def read_order(order)
  case order
  when Symbol then order
  when Sequel::Postgres::JSONBOp then order.value.args[1]
  when Sequel::SQL::Cast then order.expr.value.args[1]
  end.to_s
end

getters = $services
  .select{ |_,v| v.superclass == Getter }
  .map { |ns, getter|
    order_by = getter.s[:order].map { |order, descending|
      [ if order.is_a? Sequel::SQL::OrderedExpression
        read_order(order.expression)
      else
        read_order(order)
      end, descending ].compact
    }
    getter_class ns.gsub(/^front\//, ''), getter, order_by
  }

start = ["require '../services/start.imba'"]

IO.write 'framework/services/init.coffee', (libs + list + getters + start).join("\n")

html_location = File.exist?("app/index.html") ? "" : "framework/"
FileUtils.ln_sf File.expand_path("#{html_location}app/index.html"), 'framework/public/'
